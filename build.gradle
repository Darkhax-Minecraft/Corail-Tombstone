buildscript {
  repositories {
    maven { url = 'https://files.minecraftforge.net/maven' }
    jcenter()
    mavenCentral()
  }
  dependencies {
    classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
  }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/generic/secrets.gradle'

if (project.hasProperty('secretFile')) {
    loadSecrets(new File((String) findProperty('secretFile')))
}

version = '5.0.' + getBuildNumber();
group = 'ovh.corail'
archivesBaseName = 'tombstone'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

sourceSets {
  api
  main {
    compileClasspath += sourceSets.api.output
    runtimeClasspath += sourceSets.api.output
  }
}

configurations {
  apiCompile.extendsFrom(compile)
}

minecraft {
  mappings channel: 'snapshot', version: '20200723-1.16.1'
  // makeObfSourceJar = false
  accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
  runs {
    client {
      workingDirectory project.file('run')
      property 'forge.logging.markers', '' //SCAN,REGISTRIES,REGISTRYDUMP
      property 'forge.logging.console.level', 'info'
      mods {
        tombstone {
          source sourceSets.main
          source sourceSets.api
        }
      }
    }
    server {
      workingDirectory project.file('run')
      property 'forge.logging.markers', '' //SCAN,REGISTRIES,REGISTRYDUMP
      property 'forge.logging.console.level', 'info'
      mods {
        tombstone {
          source sourceSets.main
          source sourceSets.api
        }
      }
    }
  }
}

repositories {
  maven { url = "http://dvs1.progwml6.com/files/maven" }
  maven { url = "https://maven.theillusivec4.top/" }
  maven { url "https://maven.tterrag.com/" }
  maven { url "https://maven.tehnut.info" }
  maven { url = "https://minecraft.curseforge.com/api/maven/" }
}

dependencies {
  minecraft 'net.minecraftforge:forge:1.16.1-32.0.98'
  
  runtimeOnly fg.deobf("mezz.jei:jei-1.16.1:7.0.1.9")
  compileOnly fg.deobf("mezz.jei:jei-1.16.1:7.0.1.9:api")
  
  runtimeOnly fg.deobf("top.theillusivec4.curios:curios:FORGE-1.16.1-3.0")
  compileOnly fg.deobf("top.theillusivec4.curios:curios:FORGE-1.16.1-3.0:api")
  
  compile fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:1.16-3.0.1-beta-4")
  
  compileOnly fg.deobf("mcp.mobius.waila:Hwyla:1.10.10-B77_1.16.1:api")
  runtimeOnly fg.deobf("mcp.mobius.waila:Hwyla:1.10.10-B77_1.16.1")
  
  compile fg.deobf("cosmetic-armor-reworked:CosmeticArmorReworked:1.16.1:v1b")
}

jar {
  from sourceSets.api.output
  from sourceSets.main.output
  manifest {
    attributes([
        "Specification-Title"     : "tombstone",
        "Specification-Vendor"    : "Corail31",
        "Specification-Version"   : "1",
        "Implementation-Title"    : "tombstone",
        "Implementation-Version"  : "${version}",
        "Implementation-Vendor"   : "Corail31",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
  }
}

task apiJar(type: Jar) {
  from sourceSets.api.allJava
  from sourceSets.api.output
  classifier = 'api'
}

/*reobf {
  apiJar {
    dependsOn createMcpToSrg
    mappings = createMcpToSrg.outputs.files.singleFile
  }
}*/

tasks.build.dependsOn apiJar//, reobfApiJar

String getBuildNumber() {

    return System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : System.getenv('TRAVIS_BUILD_NUMBER') ? System.getenv('TRAVIS_BUILD_NUMBER') : '0';
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

task updateVersionTracker {

    onlyIf {
    
        project.hasProperty('versionTrackerAPI')
    }
    
    doLast {
        def body = [
            'author': "Darkhax",
            'projectName': "tombstone",
            'gameVersion': "1.15.2",
            'projectVersion': "${version}",
            'homepage': "https://www.curseforge.com/minecraft/mc-mods/corail-tombstone",
            'uid': "${project.findProperty('versionTrackerKey')}"
        ]
    
        // Opens a connection to the version tracker API and writes the payload JSON.
        def req = new URL(project.findProperty('versionTrackerAPI')).openConnection()
        req.setRequestMethod('POST')
        req.setRequestProperty('Content-Type', 'application/json; charset=UTF-8')
        req.setRequestProperty('User-Agent', "Tombstone Tracker Gradle")
        req.setDoOutput(true)
        req.getOutputStream().write(JsonOutput.toJson(body).getBytes("UTF-8"))

        // We need to attempt a read in order to actually send the message.
        println "VersionCheck Status code: ${req.getResponseCode()}"
        println "VersionCheck Response: ${req.getInputStream().getText()}"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java

            // Allows the maven pom file to be modified.
            pom.withXml {
                // Go through all the dependencies.
                asNode().dependencies.dependency.each { dep ->    

                    // Check if the dependency has been mapped with MCP
                    if (dep.version.last().value().last().contains('_mapped_snapshot_') || dep.version.last().value().last().contains('_mapped_stable_')) {    

                        // Remove the MCP mapped artifact from the dependency list.
                        println 'Surpressing MCP mapped artifact ' + dep.artifactId.last().value().last() + ' from maven dependencies.'
                        assert dep.parent().remove(dep)
                    }
                }
            }
        }
    }

    repositories {
        maven {
            // Sets the login credentials for your maven.
            credentials {
                username findProperty('userMaven')
                password findProperty('authMaven')
            }

            // Sets the maven URL
            url findProperty('urlMaven')
        }
    }
}